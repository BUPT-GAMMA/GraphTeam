[
    {
        "role": "system",
        "content": "You are a Graph Learning Specialist with expertise in utilizing Python libraries such as NetworkX to analyze and manipulate graph structures.\nYour task is to develop Python code that effectively addresses graph learning problems, ensuring that the solutions are efficient and well-documented.\nTo achieve this, you will interpret user instructions related to graph tasks, focusing on the following elements: the type of graph (directed, undirected, weighted, etc.), specific algorithms to apply (e.g., shortest path, centrality measures, community detection), and any output requirements.\nI will provide you with one or more graph-related tasks, and you must help me write structured Python code that implements the requested functionality using appropriate libraries."
    },
    {
        "role": "user",
        "content": "Based on the available search result: {\"id\": 46, \"problem\": \"Determine if there is a path between node 17 and node 10.\", \"graph_type\": \"undirected\", \"experience\": \"For determining if there is a path between two nodes in a graph, we used the NetworkX library in Python. The key steps involved defining the edges of the graph, creating an undirected graph, and then utilizing NetworkX's `has_path()` function to check for the existence of a path between the specified nodes.\", \"rag_data\": [], \"accuracy\": 1.0, \"example\": [{\"question\": \"Determine if there is a path between two nodes in the graph. Note that (i,j) means that node i and node j are connected with an undirected edge.\\nGraph: (0,3) (0,17) (0,13) (0,12) (0,4) (0,1) (1,3) (1,17) (1,16) (1,14) (1,4) (2,5) (2,7) (2,9) (2,11) (2,8) (3,15) (3,13) (3,16) (3,12) (3,14) (3,6) (4,15) (4,13) (4,16) (4,12) (4,6) (5,9) (5,11) (5,10) (6,17) (6,13) (6,12) (7,11) (7,10) (7,8) (8,9) (8,11) (9,10) (10,11) (12,15) (12,17) (12,16) (12,14) (13,17) (13,16) (14,15) (14,17) (15,17) (15,16) (16,17)\\nQ: Is there a path between node 17 and node 10?\\nA:\", \"code\": \"\\nimport networkx as nx\\n\\n# Define the edges based on the provided input\\nedges = [\\n    [0, 3], [0, 17], [0, 13], [0, 12], [0, 4], [0, 1],\\n    [1, 3], [1, 17], [1, 16], [1, 14], [1, 4], [2, 5],\\n    [2, 7], [2, 9], [2, 11], [2, 8], [3, 15], [3, 13],\\n    [3, 16], [3, 12], [3, 14], [3, 6], [4, 15], [4, 13],\\n    [4, 16], [4, 12], [4, 6], [5, 9], [5, 11], [5, 10],\\n    [6, 17], [6, 13], [6, 12], [7, 11], [7, 10], [7, 8],\\n    [8, 9], [8, 11], [9, 10], [10, 11], [12, 15], [12, 17],\\n    [12, 16], [12, 14], [13, 17], [13, 16], [14, 15],\\n    [14, 17], [15, 17], [15, 16], [16, 17]\\n]\\n\\n# Create an undirected graph\\nG = nx.Graph()\\nG.add_edges_from(edges)\\n\\n# Check if there is a path between node 17 and node 10\\npath_exists = nx.has_path(G, 17, 10)\\n\\n# Output the result\\nprint(f\\\"There is a path between node 17 and node 10: {path_exists}\\\")\\n\", \"key_api\": \"NetworkX's `has_path()` function.\", \"key_experience\": \"1. Defining the graph edges clearly and concisely. 2. Using NetworkX to create the graph and utilize its built-in functions for graph operations. 3. Checking for path existence in a graph using a well-known library function.\"}]}, your goal is to write Python code that solves the specified graph learning problem using libraries like NetworkX.\n\nIf there is no search result, generate the code based on your expertise.\n\nATTENTION: This is the actual problem that needs to be solved, based on the provided information. Please disregard the example above while solving this real task.\n Graph_Type: undirected \n Input: {'Graph': ['(0,26)', '(0,15)', '(0,25)', '(0,14)', '(0,7)', '(0,2)', '(0,9)', '(0,5)', '(1,26)', '(1,15)', '(1,25)', '(1,7)', '(1,6)', '(1,2)', '(1,20)', '(1,22)', '(2,25)', '(2,19)', '(2,14)', '(2,4)', '(3,12)', '(3,16)', '(4,15)', '(4,7)', '(4,6)', '(4,8)', '(5,26)', '(5,20)', '(5,8)', '(5,9)', '(5,22)', '(5,13)', '(6,19)', '(6,17)', '(6,7)', '(6,20)', '(6,22)', '(7,19)', '(7,17)', '(7,9)', '(8,19)', '(9,26)', '(9,14)', '(9,24)', '(11,12)', '(12,21)', '(12,18)', '(12,16)', '(13,17)', '(13,22)', '(14,26)', '(14,22)', '(15,19)', '(15,20)', '(16,21)', '(18,23)', '(19,20)', '(19,22)', '(25,26)'], 'Query': {'Start_Node': 7, 'End_Node': 23}}, \n Problem: Determine if there is a path between node 7 and node 23., \n Output Format: None.\n\nThe output code must adhere to the following format: '```python\ncode\n```' to ensure easy extraction."
    }
]